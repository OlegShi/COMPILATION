/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;

parser code 
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	//System.out.print(s.sym);
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/
terminal IF;
terminal EQ;
terminal DOT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal WHILE;
terminal DIVIDE;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal SEMICOLON;
terminal ASSIGN;
terminal COMMA;
terminal LT;
terminal GT;
terminal CLASS;
terminal NIL;
terminal ARRAY;
terminal EXTENDS;
terminal RETURN;
terminal NEW;

/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;
terminal String STRING;
terminal UMINUS;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_EXP exp;
non terminal AST_EXP_LIST expList;
non terminal AST_VAR var;
non terminal AST_STMT stmt;
non terminal AST_STMT_LIST stmtList;
non terminal AST_EXP_BINOP binop;
non terminal AST_PROGRAM program;
non terminal AST_DEC dec;
non terminal AST_PARAM param;
non terminal AST_PARAM_LIST paramList;
non terminal AST_VAR_DEC varDec;
non terminal AST_FUNC_DEC funcDec;
non terminal AST_C_FEILD cField;
non terminal AST_C_FEILD_LIST cFieldList;
non terminal AST_CLASS_DEC classDec;
non terminal AST_ARRAY_DEC arrayDec;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence left ASSIGN;
precedence left EQ;
precedence left LT;
precedence left GT;
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left DIVIDE;
precedence left UMINUS; // Is it should be here at all?
precedence left LBRACK;
precedence left LPAREN;
precedence left DOT;

/************************/
/* START WITH: stmtList */
/************************/
start with program;

/********************/
/* DERIVATION RULES */
/********************/

program       ::=   dec:d program:p          {: RESULT = new AST_PROGRAM(d,p);        :}
                    | dec:d                  {: RESULT = new AST_PROGRAM(d,null);     :}
                    ;

stmtList     ::=		stmt:s	stmtList:l		{: RESULT = new AST_STMT_LIST(s,l);    :}
					          | stmt:s		      		{: RESULT = new AST_STMT_LIST(s,null); :}
				          	;

var			            ::=		ID:name							    	{: RESULT = new AST_VAR_SIMPLE(name);       :}
          					| var:v DOT ID:fieldName		  	{: RESULT = new AST_VAR_FIELD(v,fieldName); :} 
          					| var:v LBRACK exp:e RBRACK			{: RESULT = new AST_VAR_SUBSCRIPT(v,e);     :} 
          					;
          					
stmt	      ::=	  	varDec:v                                                {: RESULT = new AST_STMT_VAR_DECLERATION(v); :}
                    |var:v ASSIGN exp:e SEMICOLON							                 	{: RESULT = new AST_STMT_ASSIGN(v,e); :}
                    | RETURN SEMICOLON                                          {: RESULT = new AST_STMT_RETURN(null); :}
                    | RETURN exp:e SEMICOLON                                    {: RESULT = new AST_STMT_RETURN(e); :}
            				| IF    LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_IF(   cond,body); :}
                		| WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(cond,body); :}
                    | ID:name LPAREN RPAREN SEMICOLON                           {: RESULT = new AST_STMT_FUNCTION_CALL(null, name, null);:}
                    | ID:name LPAREN expList:el RPAREN SEMICOLON                {: RESULT = new AST_STMT_FUNCTION_CALL(null, name, el);:}
                    | var:v DOT ID:name LPAREN RPAREN SEMICOLON                 {: RESULT = new AST_STMT_FUNCTION_CALL(v, name, null);:}
                    | var:v DOT ID:name LPAREN expList:el RPAREN SEMICOLON      {: RESULT = new AST_STMT_FUNCTION_CALL(v, name, el);:}
          					;

expList      ::=     exp:e COMMA expList:l   {: RESULT = new AST_EXP_LIST(e, l);:}
                    | exp:e                 {: RESULT = new AST_EXP_LIST(e, null);:}
                    ;
                    
exp	     ::=     var:v				         {: RESULT = new AST_EXP_VAR(v);:}
                    | LPAREN exp:e RPAREN  			 {: RESULT = new AST_EXP_PAREN(e);:}
		    | exp:e1 PLUS  exp:e2		         {: RESULT = new AST_EXP_BINOP(e1, e2, 0);:}
		    | exp:e1 MINUS exp:e2		         {: RESULT = new AST_EXP_BINOP(e1, e2, 1);:}
                    | exp:e1 TIMES exp:e2		         {: RESULT = new AST_EXP_BINOP(e1, e2, 2);:}
                    | exp:e1 DIVIDE exp:e2		      	 {: RESULT = new AST_EXP_BINOP(e1, e2, 3);:}
                    | exp:e1 LT exp:e2			         {: RESULT = new AST_EXP_BINOP(e1, e2, 4);:}
                    | exp:e1 GT exp:e2			         {: RESULT = new AST_EXP_BINOP(e1, e2, 5);:}
                    | exp:e1 EQ exp:e2			         {: RESULT = new AST_EXP_BINOP(e1, e2, 6);:}
                    | ID:name LPAREN RPAREN                      {: RESULT = new AST_EXP_FUNCTION_CALL(null, name, null);:}
                    | ID:name LPAREN expList:el RPAREN           {: RESULT = new AST_EXP_FUNCTION_CALL(null, name, el);:}
                    | var:v DOT ID:name LPAREN RPAREN            {: RESULT = new AST_EXP_FUNCTION_CALL(v, name, null);:}
                    | var:v DOT ID:name LPAREN expList:el RPAREN {: RESULT = new AST_EXP_FUNCTION_CALL(v, name, el);:}
                    | INT:i                                      {: RESULT = new AST_EXP_INT(i);:}
                    | UMINUS INT:i			         {: RESULT = new AST_EXP_INT(-i);:}
                    | NIL					 {: RESULT = new AST_EXP_NIL();:}
                    | STRING:s 					 {: RESULT = new AST_EXP_STRING(s);:}
                    | NEW ID:name				 {: RESULT = new AST_EXP_NEW_ID(name,null);:}
                    | NEW ID:name LBRACK exp:e RBRACK		 {: RESULT = new AST_EXP_NEW_ID(name,e);:}
		    ;
                    
param       ::=     ID:varType ID:varName  {: RESULT = new AST_PARAM(varType, varName);:}
                    ;

paramList   ::=     param:p COMMA paramList:l         {: RESULT = new AST_PARAM_LIST(p, l);:}
					          | param:p                         {: RESULT = new AST_PARAM_LIST(p, null);:}
				          	;
  
varDec      ::=     param:p SEMICOLON                    {: RESULT = new AST_VAR_DEC(p, null);:}
                    | param:p ASSIGN exp:e SEMICOLON     {: RESULT = new AST_VAR_DEC(p, e);:}
                    ;
                    
funcDec     ::=     param:p LPAREN RPAREN LBRACE stmtList:sl RBRACE                  {: RESULT = new AST_FUNC_DEC(p, null, sl);:}
                    | param:p LPAREN paramList:l RPAREN LBRACE stmtList:sl RBRACE    {: RESULT = new AST_FUNC_DEC(p, l, sl);:}
                    ;
                    
cField      ::=     varDec:v     {: RESULT = new AST_VAR_FEILD(v);:}
                    | funcDec:f  {: RESULT = new AST_FUNC_FEILD(f);:}
                    ;
                    
cFieldList  ::=     cField:c cFieldList:l {: RESULT = new AST_C_FEILD_LIST(c, l);:}
                    | cField:c            {: RESULT = new AST_C_FEILD_LIST(c, null);:}
                    ;

classDec    ::=     CLASS ID:className LBRACE cFieldList:l RBRACE                               {: RESULT = new AST_CLASS_DEC(className, null, l);:}
                    | CLASS ID:className EXTENDS ID:extendName LBRACE cFieldList:l RBRACE       {: RESULT = new AST_CLASS_DEC(className, extendName, l);:}
                    ;
                    
arrayDec    ::=     ARRAY ID:name EQ ID:type LBRACK RBRACK  {: RESULT = new AST_ARRAY_DEC(name,type);:}
                    ;
                    
dec         ::=     funcDec:f             {: RESULT = new AST_DEC(f);   :}
                    | varDec:v            {: RESULT = new AST_DEC(v);   :}
                    | classDec:c          {: RESULT = new AST_DEC(c);   :}
                    | arrayDec:a          {: RESULT = new AST_DEC(a);   :}
                    ;
